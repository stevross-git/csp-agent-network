#!/usr/bin/env python3
"""
Report generator for breach benchmarking results
"""

import json
import yaml
import argparse
from pathlib import Path
from datetime import datetime
from jinja2 import Template

def generate_html_report(data: dict, output_path: str):
    """Generate HTML report"""
    
    html_template = """
<!DOCTYPE html>
<html>
<head>
    <title>Enhanced CSP Breach Benchmarking Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
        .summary { background: #ecf0f1; padding: 15px; margin: 20px 0; border-radius: 5px; }
        .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 3px; }
        .critical { color: #e74c3c; }
        .high { color: #f39c12; }
        .medium { color: #f1c40f; }
        .low { color: #27ae60; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #34495e; color: white; }
        .recommendations { background: #d5dbdb; padding: 15px; margin: 20px 0; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Enhanced CSP Security Assessment Report</h1>
        <p>Generated: {{ report_date }}</p>
    </div>
    
    <div class="summary">
        <h2>Executive Summary</h2>
        <div class="metric">
            <strong>Overall Security Score:</strong> {{ executive_summary.overall_security_score }}/100
        </div>
        <div class="metric">
            <strong>Detection Rate:</strong> {{ executive_summary.detection_rate }}%
        </div>
        <div class="metric">
            <strong>Critical Vulnerabilities:</strong> {{ executive_summary.critical_vulnerabilities }}
        </div>
        <div class="metric">
            <strong>Risk Level:</strong> <span class="{{ risk_assessment.overall_risk_level.lower() }}">{{ risk_assessment.overall_risk_level }}</span>
        </div>
    </div>
    
    <h2>Detailed Findings</h2>
    <table>
        <thead>
            <tr>
                <th>Scenario</th>
                <th>Type</th>
                <th>Detected</th>
                <th>Success Rate</th>
                <th>Severity</th>
            </tr>
        </thead>
        <tbody>
            {% for finding in detailed_findings %}
            <tr>
                <td>{{ finding.scenario_name }}</td>
                <td>{{ finding.breach_type }}</td>
                <td>{{ "✓" if finding.detected else "✗" }}</td>
                <td>{{ "%.1f%%" | format(finding.success_rate * 100) }}</td>
                <td class="{{ finding.severity.lower() }}">{{ finding.severity }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
    <div class="recommendations">
        <h2>Recommendations</h2>
        <h3>Immediate Actions</h3>
        <ul>
            {% for action in recommendations.immediate_actions %}
            <li>{{ action }}</li>
            {% endfor %}
        </ul>
        
        <h3>Short-term Improvements</h3>
        <ul>
            {% for improvement in recommendations.short_term_improvements %}
            <li>{{ improvement }}</li>
            {% endfor %}
        </ul>
    </div>
    
    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd;">
        <p><em>Report generated by Enhanced CSP Breach Benchmarking Framework v1.0</em></p>
    </footer>
</body>
</html>
    """
    
    template = Template(html_template)
    html_content = template.render(
        report_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        **data
    )
    
    with open(output_path, 'w') as f:
        f.write(html_content)

def main():
    parser = argparse.ArgumentParser(description='Generate breach benchmarking report')
    parser.add_argument('input_file', help='Input JSON results file')
    parser.add_argument('--format', choices=['html', 'json'], default='html', help='Output format')
    parser.add_argument('--output', help='Output file path')
    
    args = parser.parse_args()
    
    # Load results
    with open(args.input_file, 'r') as f:
        data = json.load(f)
    
    # Generate output filename if not provided
    if not args.output:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        args.output = f"benchmark_report_{timestamp}.{args.format}"
    
    # Generate report
    if args.format == 'html':
        generate_html_report(data, args.output)
    elif args.format == 'json':
        with open(args.output, 'w') as f:
            json.dump(data, f, indent=2, default=str)
    
    print(f"Report generated: {args.output}")

if __name__ == "__main__":
    main()
