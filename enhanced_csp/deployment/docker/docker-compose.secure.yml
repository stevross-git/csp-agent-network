# docker-compose.secure.yml
# Secure database configuration with authentication

version: '3.8'

networks:
  backend-internal:
    internal: true
  frontend-backend:
    driver: bridge

services:
  # ============================================================================
  # PostgreSQL with Authentication
  # ============================================================================
  csp_postgres:
    image: postgres:15-alpine
    container_name: csp_postgres
    restart: unless-stopped
    networks:
      - backend-internal
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      # Security settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Remove ports in production - only accessible via internal network
    # ports:
    #   - "5432:5432"

  # AI Models Database with Authentication
  csp_ai_models_db:
    image: postgres:15-alpine
    container_name: csp_ai_models_db
    restart: unless-stopped
    networks:
      - backend-internal
    environment:
      POSTGRES_USER: ${AI_MODELS_DB_USER}
      POSTGRES_PASSWORD: ${AI_MODELS_DB_PASSWORD}
      POSTGRES_DB: ${AI_MODELS_DB_NAME}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - ai_models_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AI_MODELS_DB_USER} -d ${AI_MODELS_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Database with Authentication
  csp_postgres_vector:
    image: pgvector/pgvector:pg15
    container_name: csp_postgres_vector
    restart: unless-stopped
    networks:
      - backend-internal
    environment:
      POSTGRES_USER: ${VECTOR_DB_USER}
      POSTGRES_PASSWORD: ${VECTOR_DB_PASSWORD}
      POSTGRES_DB: ${VECTOR_DB_NAME}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - vector_db_data:/var/lib/postgresql/data
      - ./init-scripts/vector:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${VECTOR_DB_USER} -d ${VECTOR_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Redis with Authentication
  # ============================================================================
  csp_redis:
    image: redis:7-alpine
    container_name: csp_redis
    restart: unless-stopped
    networks:
      - backend-internal
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-appendonly.aof"
      --dbfilename dump.rdb
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # MongoDB with Authentication (if needed)
  # ============================================================================
  csp_mongodb:
    image: mongo:6
    container_name: csp_mongodb
    restart: unless-stopped
    networks:
      - backend-internal
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    volumes:
      - mongo_data:/data/db
      - ./init-scripts/mongo:/docker-entrypoint-initdb.d
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD}
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Backend Service with Secure Database Connections
  # ============================================================================
  backend:
    build: ./backend
    container_name: csp_backend
    restart: unless-stopped
    networks:
      - backend-internal
      - frontend-backend
    env_file:
      - ./backend/.env
    environment:
      # Override database hosts for container networking
      - DB_HOST=csp_postgres
      - REDIS_HOST=csp_redis
      - AI_MODELS_DB_HOST=csp_ai_models_db
      - VECTOR_DB_HOST=csp_postgres_vector
      - MONGO_HOST=csp_mongodb
      # Ensure passwords are set
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@csp_postgres:5432/${DB_NAME}
      - AI_MODELS_DB_URL=postgresql://${AI_MODELS_DB_USER}:${AI_MODELS_DB_PASSWORD}@csp_ai_models_db:5432/${AI_MODELS_DB_NAME}
      - VECTOR_DB_URL=postgresql://${VECTOR_DB_USER}:${VECTOR_DB_PASSWORD}@csp_postgres_vector:5432/${VECTOR_DB_NAME}
      - MONGO_URI=mongodb://${MONGO_APP_USER}:${MONGO_APP_PASSWORD}@csp_mongodb:27017/${MONGO_DB_NAME}?authSource=${MONGO_DB_NAME}
    depends_on:
      csp_postgres:
        condition: service_healthy
      csp_redis:
        condition: service_healthy
      csp_ai_models_db:
        condition: service_healthy
      csp_postgres_vector:
        condition: service_healthy
    ports:
      - "8000:8000"

  # ============================================================================
  # Nginx Reverse Proxy (optional but recommended)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: csp_nginx
    restart: unless-stopped
    networks:
      - frontend-backend
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  ai_models_db_data:
  vector_db_data:
  redis_data:
  mongo_data: