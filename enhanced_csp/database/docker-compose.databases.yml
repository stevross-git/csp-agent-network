# docker-compose.databases.yml
version: '3.8'

services:
  # =============================================================================
  # POSTGRESQL DATABASES
  # =============================================================================
  
  # Main PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: csp_postgres
    environment:
      POSTGRES_USER: csp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-csp_secure_pass_2024!}
      POSTGRES_DB: csp_system
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init/01-init-main.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csp_user -d csp_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # AI Models PostgreSQL Database
  postgres_ai_models:
    image: postgres:15-alpine
    container_name: csp_ai_models_db
    environment:
      POSTGRES_USER: csp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-csp_secure_pass_2024!}
      POSTGRES_DB: ai_models
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_ai_models_data:/var/lib/postgresql/data
      - ./database/ai_models_init/01-init-ai-models.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csp_user -d ai_models"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector PostgreSQL Database with pgvector extension
  postgres_vector:
    image: pgvector/pgvector:pg15
    container_name: csp_postgres_vector
    environment:
      POSTGRES_USER: csp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-csp_secure_pass_2024!}
      POSTGRES_DB: csp_vectors
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5434:5432"
    volumes:
      - postgres_vector_data:/var/lib/postgresql/data
      - ./database/pgvector/init/01-init-vector-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csp_user -d csp_vectors"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # REDIS
  # =============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: csp_redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secure_pass_2024!}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-aof.aof"
      --appendfsync everysec
      --no-appendfsync-on-rewrite no
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
      --databases 16
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scripts_csp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # MONGODB
  # =============================================================================
  
  mongodb:
    image: mongo:6
    container_name: csp_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: csp_admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo_secure_pass_2024!}
      MONGO_INITDB_DATABASE: csp_nosql
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/mongodb/init:/docker-entrypoint-initdb.d:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/csp_nosql --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # VECTOR DATABASES
  # =============================================================================
  
  # ChromaDB for embeddings
  chroma:
    image: chromadb/chroma:latest
    container_name: csp_chroma
    environment:
      - ANONYMIZED_TELEMETRY=false
      - ALLOW_RESET=true
      - IS_PERSISTENT=true
    ports:
      - "8200:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - scripts_csp-network
    restart: unless-stopped

  # Qdrant for vector search
  qdrant:
    image: qdrant/qdrant:latest
    container_name: csp_qdrant
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./database/qdrant/config/config.yaml:/qdrant/config/production.yaml:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped

  # Weaviate for semantic search
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: csp_weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - scripts_csp-network
    restart: unless-stopped

  # =============================================================================
  # DATABASE ADMIN TOOLS (Optional - Comment out if not needed)
  # =============================================================================
  
  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: csp_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@csp.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadmin_pass_2024!}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - scripts_csp-network
    restart: unless-stopped
    depends_on:
      - postgres
      - postgres_ai_models
      - postgres_vector

  # RedisInsight for Redis management
  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: csp_redis_insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - scripts_csp-network
    restart: unless-stopped
    depends_on:
      - redis

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  scripts_csp-network:
    external: true

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  # PostgreSQL volumes
  postgres_data:
    driver: local
  postgres_ai_models_data:
    driver: local
  postgres_vector_data:
    driver: local
  
  # Redis volume
  redis_data:
    driver: local
  
  # MongoDB volume
  mongodb_data:
    driver: local
  
  # Vector database volumes
  chroma_data:
    driver: local
  weaviate_data:
    driver: local
  qdrant_data:
    driver: local
  
  # Admin tool volumes
  pgadmin_data:
    driver: local
  redis_insight_data:
    driver: local