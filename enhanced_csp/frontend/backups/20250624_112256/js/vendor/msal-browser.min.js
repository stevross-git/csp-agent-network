/**
 * Enhanced Local MSAL Implementation for Enhanced CSP System
 * This provides a functional MSAL-compatible interface when CDNs are not accessible
 */

(function() {
    'use strict';

    // MSAL Error Classes
    class AuthError extends Error {
        constructor(errorCode, errorMessage) {
            super(errorMessage);
            this.errorCode = errorCode;
            this.name = 'AuthError';
        }
    }

    class InteractionRequiredAuthError extends AuthError {
        constructor(errorCode, errorMessage) {
            super(errorCode, errorMessage);
            this.name = 'InteractionRequiredAuthError';
        }
    }

    // Account class
    class AccountInfo {
        constructor(homeAccountId, environment, tenantId, username, name, idTokenClaims) {
            this.homeAccountId = homeAccountId;
            this.environment = environment;
            this.tenantId = tenantId;
            this.username = username;
            this.name = name;
            this.idTokenClaims = idTokenClaims;
        }
    }

    // Authentication Result
    class AuthenticationResult {
        constructor(accessToken, account, scopes, expiresOn) {
            this.accessToken = accessToken;
            this.account = account;
            this.scopes = scopes;
            this.expiresOn = expiresOn;
        }
    }

    // Public Client Application
    class PublicClientApplication {
        constructor(config) {
            this.config = config;
            this.account = null;
            this.isInitialized = false;
            this.tokens = new Map();
            
            console.log('üîß Enhanced Local MSAL Implementation Initialized');
            console.log('‚ö†Ô∏è  This is a testing implementation - not for production use');
        }

        async initialize() {
            this.isInitialized = true;
            
            // Try to restore session from sessionStorage
            try {
                const storedAccount = sessionStorage.getItem('msal.account');
                if (storedAccount) {
                    this.account = JSON.parse(storedAccount);
                    console.log('üìÑ Restored account from session storage');
                }
            } catch (error) {
                console.warn('Failed to restore session:', error);
            }
            
            console.log('‚úÖ Enhanced Local MSAL initialized successfully');
        }

        getActiveAccount() {
            return this.account;
        }

        setActiveAccount(account) {
            this.account = account;
            if (account) {
                sessionStorage.setItem('msal.account', JSON.stringify(account));
            } else {
                sessionStorage.removeItem('msal.account');
            }
        }

        async loginPopup(request) {
            console.log('üîê Starting enhanced local login simulation...');
            
            return new Promise((resolve, reject) => {
                // Create a simple modal for user input
                const modal = this.createLoginModal();
                document.body.appendChild(modal);
                
                const emailInput = modal.querySelector('#modal-email');
                const nameInput = modal.querySelector('#modal-name');
                const loginBtn = modal.querySelector('#modal-login');
                const cancelBtn = modal.querySelector('#modal-cancel');
                
                loginBtn.onclick = () => {
                    const email = emailInput.value.trim();
                    const name = nameInput.value.trim() || email.split('@')[0];
                    
                    if (!email || !email.includes('@')) {
                        alert('Please enter a valid email address');
                        return;
                    }
                    
                    // Create mock account
                    const mockAccount = new AccountInfo(
                        `local-${Date.now()}`,
                        'login.microsoftonline.com',
                        this.config.auth.authority?.split('/').pop() || 'common',
                        email,
                        name,
                        {
                            name: name,
                            preferred_username: email,
                            oid: `local-${Date.now()}`,
                            tid: this.config.auth.authority?.split('/').pop() || 'common'
                        }
                    );
                    
                    this.account = mockAccount;
                    sessionStorage.setItem('msal.account', JSON.stringify(mockAccount));
                    
                    document.body.removeChild(modal);
                    
                    console.log('‚úÖ Local login successful:', mockAccount);
                    resolve(new AuthenticationResult(null, mockAccount, request.scopes, null));
                };
                
                cancelBtn.onclick = () => {
                    document.body.removeChild(modal);
                    reject(new AuthError('user_cancelled', 'User cancelled the login'));
                };
                
                // Auto-focus email input
                setTimeout(() => emailInput.focus(), 100);
            });
        }

        async acquireTokenSilent(request) {
            if (!this.account) {
                throw new InteractionRequiredAuthError('no_account', 'No active account');
            }
            
            // Generate a mock token with current timestamp
            const mockToken = `eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.${btoa(JSON.stringify({
                aud: this.config.auth.clientId,
                iss: this.config.auth.authority,
                iat: Math.floor(Date.now() / 1000),
                exp: Math.floor(Date.now() / 1000) + 3600,
                sub: this.account.homeAccountId,
                upn: this.account.username,
                name: this.account.name,
                oid: this.account.idTokenClaims.oid,
                tid: this.account.tenantId,
                scp: request.scopes.join(' ')
            }))}.mock-signature`;
            
            console.log('üîë Generated mock access token');
            
            return new AuthenticationResult(
                mockToken,
                this.account,
                request.scopes,
                new Date(Date.now() + 3600000) // 1 hour from now
            );
        }

        async acquireTokenPopup(request) {
            // For popup token acquisition, just use the same logic as silent
            return this.acquireTokenSilent(request);
        }

        async logoutPopup() {
            this.account = null;
            sessionStorage.removeItem('msal.account');
            sessionStorage.removeItem('csp_azure_session');
            console.log('‚úÖ Local logout successful');
        }

        createLoginModal() {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
            `;
            
            modal.innerHTML = `
                <div style="
                    background: white;
                    border-radius: 12px;
                    padding: 2rem;
                    max-width: 400px;
                    width: 90%;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                ">
                    <h2 style="margin: 0 0 1.5rem 0; color: #2c3e50; text-align: center;">
                        üîê Enhanced CSP System Login
                    </h2>
                    <p style="margin: 0 0 1.5rem 0; color: #7f8c8d; text-align: center; font-size: 0.9rem;">
                        Enter your credentials for testing Azure AD integration
                    </p>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #2c3e50;">
                            Email Address:
                        </label>
                        <input type="email" id="modal-email" placeholder="your.email@company.com" style="
                            width: 100%;
                            padding: 0.75rem;
                            border: 1px solid #ddd;
                            border-radius: 6px;
                            font-size: 0.9rem;
                            box-sizing: border-box;
                        ">
                    </div>
                    <div style="margin-bottom: 1.5rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600; color: #2c3e50;">
                            Display Name:
                        </label>
                        <input type="text" id="modal-name" placeholder="Your Name" style="
                            width: 100%;
                            padding: 0.75rem;
                            border: 1px solid #ddd;
                            border-radius: 6px;
                            font-size: 0.9rem;
                            box-sizing: border-box;
                        ">
                    </div>
                    <div style="display: flex; gap: 0.5rem;">
                        <button id="modal-login" style="
                            flex: 1;
                            padding: 0.75rem;
                            background: #0078d4;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            font-size: 0.9rem;
                            font-weight: 600;
                            cursor: pointer;
                        ">
                            Sign In
                        </button>
                        <button id="modal-cancel" style="
                            flex: 1;
                            padding: 0.75rem;
                            background: #6c757d;
                            color: white;
                            border: none;
                            border-radius: 6px;
                            font-size: 0.9rem;
                            font-weight: 600;
                            cursor: pointer;
                        ">
                            Cancel
                        </button>
                    </div>
                    <div style="
                        margin-top: 1rem;
                        padding: 0.75rem;
                        background: #f8f9fa;
                        border-radius: 6px;
                        font-size: 0.8rem;
                        color: #6c757d;
                        text-align: center;
                    ">
                        üí° This is a local testing interface.<br>
                        Your data is only stored locally for this session.
                    </div>
                </div>
            `;
            
            return modal;
        }
    }

    // Export to global scope
    window.msal = {
        PublicClientApplication: PublicClientApplication,
        AuthError: AuthError,
        InteractionRequiredAuthError: InteractionRequiredAuthError
    };

    console.log('üì¶ Enhanced Local MSAL Implementation loaded successfully');
    console.log('üß™ Ready for Azure AD testing with local fallback');

})();
